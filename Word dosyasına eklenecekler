Önsöz Kısmı:
Bana her daim moral anlamında destek olan ve yanımla olan babam Kemal Haldun Sertel, annem Fatma Kumsal Sertel ve kardeşim Kaya Sertel'e,
Tezi yazma sürecinde bana yardımcı olan, Huawei firmasındaki Yöneticim, Serhat Gül'e,
Bana yardımlarını esirgemeyen değerli arkadaşım Mehmet Zeki Sildir ve Zeynep Güler'e,
Bu yüksek lisans tezini ortaya çıkarmamda bana katkısı olan herkese,
Ve son olarak tüm katılımcılara,
teşekkürü borç bilirim.

Tarih----------------------------------------------------------------------------------------İsim Soyad

İçindekiler Bölümü
1-) Giriş
    - 1.1 Şifreleme ve Deşifreleme
    - 1.2 Şifreleme Algoritmaları
        - 1.2.1 Asimetrik Şifreleme Algoritmaları
        - 1.2.2 Simetrik Şifreleme Algoritmaları
        - 1.2.3 Asimetrik/Simetrik Algoritmaların Avantajlarının/Dezavantajlarının İncelenmesi
        - 1.2.4 5G ve Wireless Teknolojilerde amaca uygun olan algoritmalar
    - 1.3 Public/Private Key
        - 1.3.1 Public Key Decryption
        - 1.3.2 Private Key Decryption
    - 1.4 5G Teknolojisinin gelişimi
    - 1.5 Wireless Teknolojisinin gelişimi
    - 1.6 Amaç ve Önem
    - 1.7 Literatür Araştırması
        - 1.7.1 Şifreleme Algoritmalarıyla ilgili yapılmış olan çalışmalar
        - 1.7.2 5G teknolojilerinde şifreleme algoritmalarıyla ilgili yapılmış olan çalışmalar
        - 1.7.2 Wireless ile ilgili şifreleme algoritmalarıyla ilgili yapılmış olan çalışmalar
2-) Metaryal ve Yöntem
    - 2.1 Kullanılacak olan şifreleme algoritmaları
    - 2.2 Visual Studio IDE'si
    - 2.2 OpenSSL kütüphanesi
        - 2.2.1 OpenSSL'in Visual Studio IDE'sine entegre edilmesi
        - 2.2.2 Entegrasyonun başarılı olup olmadığının test edilmesi
    - 2.3 C++ Programlama Dili
        - 2.3.1 C++ dilinin kullanım alanları
        - 2.3.2 Neden C++ dilinin kullanıldığının açıklanması
    - 2.4 Grafik tasarımı için geçerli 3.parti kütüphanenin eklenmesi
    - 2.5 Git Bash
3-) Bulgular ve Tartışma
    - OpenSSL kütüphanesindeki algoritmaların testi sonucunda:
        a-) performans açısından en iyi olan algoritma belirlenir.
        b-) güvenilirlik açısından en iyi olan algoritma belirlenir.
        c-) Bu iki parametrenin varsa ikisinde de en iyi olan yoksa güvenilirlik açısında iyi olup performans açısından da kötü olmayan algoritma seçilir.
    - Elde edilen bulgulardan bir grafik oluşturulup grafiğin tartışılması
4-) Sonuç
- Referanslar

Giriş
Tarih boyunca insanlar birbirlere gizli verileri gönderirken özellikle 3.kişilerin ellerine geçmemesini hedeflenmiştir. Verilerin gizlenmesinde geçmişten günümüze çok sayıda farklı yöntem kullanılmıştır. 
Bunların en örneklerinden bir tanesi Almanların 2. Dünya savaşında kullanmış olduğu Enigma makinesidir. Bu makine verileri gönderirken o zamanın teknolojisiyle çözülmesi son derece zor bir algoritma ile 
verileri göndermekteydi. Bu örnek aynı zamanda haberleşirken veri şifreleme yönteminin önemli bir örneğidir. O zamandan günümüze kıyasla şifreleme algoritmalarında ciddi anlamda bir gelişme göze çarpmaktadır. 
Bu tez çalışmasında da hayatımıza yeni yeni girmekte olan 5G teknolojisi ve günlük hayatımızda sıkça kullandığımız ancak tehlikeli durumlara sebep olması en muhtemel teknolojilerden biri 
olan Wireless teknolojisinde hangi algoritmaların kullanıma daha elverişli olduğunun analizi yapılmıştır.

Veri Şifreleme algoritmaları, herhangi verinin taşınırken veya bilgisayarda kayıtlıyken dışardan gelebilecek saldırılara karşı korunmasını sağlayan ve pek çok farklı çeşidi olan algoritmalardır. Bu algoritmaların,
her ne kadar tehlikelerden korunmak için de kullanmak bazen bu saldırıların engellenmesi mümkün olamayabilir. Bu yüzden bu tezin önemli kısımlarından biri de olası saldırı durumlarında söz konusu algoritmaların 
güvenlik açısından ne oranda yeterli olduğunun analiz edilmesidir. Bu algoritmaların hepsi farklı yöntemleri kullanarak verilerimizin güvenliği sağlamaktadır ancak bu algoritmaların sanal fidye programları gibi kötü
amaçlar için de kullanılabileceği unutulmamalıdır. 

Veri şifreleme algoritmaları, OpenSSL 3.parti kütüphanesinin de hayatımıza girmesiyle beraber programlamada sıkça kullanılır bir hale gelmiş oldu. OpenSSL kütüphanesi, herhangi bir programa dilinin SL(Standard Library)'inde
yer almadığından dolayı bu kütüphane kod yazmanın tek yolu bu kütüphanenin çalışılan IDE(Integrated Development Environment)'ye entegre edilmesidir. OpenSSL kütüphanesi sadece veri şifreleme algoritmalarını değil aynı zamanda 
da güvenlik veri taşımada son derece önemli bir yere sahip SSL ve TLS protokollerini de içermektedir. Bu kütüphanede mevcut olup bu yüksek lisans tezinde de kullanılacak olan algoritmalardan bazıları: AES, RSA, Chacha20,
DSA, Camellia, Seed gibi algoritmalardır. 

Bu algoritmalar, analiz edilirken iki parametre çok önemli yere sahip olacaktır. Bunlar güvenilirlik ve performans parametreleridir. Bir veri şifreleme algoritması değerlendirilirken bir özellik bakımından çok iyi 
ama diğeri açısından da en azından iyi olması gerekir. Bu tez kapsamından bu kriterler göz önünde bulundurularak bir analiz yapılmıştır. Elde edilen analiz sonuçlarından bir grafik elde edilip bir sonuca ulaşılacaktır.

Bu yüksek lisans tezi temelde 3 adımdan oluşmaktadır. İlk olarak OpenSSL kütüphanesindeki şifreleme algoritmaları kullanılarak algoritmalara ilişkin sınıflar oluşturulacaktır. Oluşturulan sınıflar için çeşitli test 
case durumları oluşturularak farklı durumlar için algoritmaların nasıl çalıştıkları test edilecektir. Burada test caseler kullanılacak algoritma tipi şifreleme sırasında 
kullanılacak anahtarın özellikleri veya şifrelenecek veri tipi vb. özellikler olacaktır. Yapılan testler sonucunda Elde edilen test sonuçlarına bağlı olarak farklı durumlar 
için farklı grafikler elde edilerek bir sonuca varılacaktır. 


Abstract

//ingilizce

Semboller 
E   : Public Key
D   : Private Key
T   : Totient

Kısaltmalar
AES : Advanced Encryption Standards
DH  : Diffie Helman
RSA : Rivest-Shamir-Adleman
DES : Data Encryption Standards
RC4 : Rivest Encryption 4
DSA : Digital Signature Algorithm
FTP : File Transfer Protocol
TLS : Transfer Layer Protocol
SSL : Secure Sockets Layers
PT  : Plain Text(Şifrelememiş yazı)
CT  : Cipher Text(Şifrelenmiş Yazı)

Şekil Listesi
Şekil 1.1 Şifreleme/Deşifreleme modeli(Encryption/Decryption Model)
Şekil 1.2 Şifreleme algoritmalarının şeması
Şekil 1.3 AES algoritması Modeli
Şekil 1.4 RSA algoritması Modeli
....

Tablo Listesi
Şekil 2.1 Simetrik/Asimetrik algoritmaların performans sütun grafiği
Şekil 2.2 Simetrik/Asimetrik algoritmaların hız sütun grafiği

1.Giriş 

Kriptografi, güvenli iletişim verilerin korunmasını sağlayan bilim dalıdır. Kriptografi kelimesi aslında Antik yunanca'da gizli anlamına gelen "kriptos" ve yazı anlamına 
gelen "graphi" kelimelerinden gelmektedir. Bu bilim dalının hayatımıza girişiyle birlikte veri şifreleme de hayatımıza girmiş oldu. Veri şifreleme geçmişte günümüze pek çok 
farklı alanda kullanılmıştır çünkü tarih boyunca insan birbirleriyle haberleşirken verilerin gizli tutulmasına önem vermiştir. Kısacası veri şifreleme Alan Turing'in bilgisayarı
icat etmesiyle hayatımıza girmemiştir aslında haberleşmede gizliliğin önemli olduğu her yerde veri şifreleme teknikleri kullanılmıştır. Kriptoloji aslında bir matematik bilimidir 
ve genelde sayılar teorisi üstüne kurulmuştur. 

Tarihte ilk kriptolog, yaklaşık olarak milattan önce 20.yüzyılda Mısırda yaşamış olan bir katiptir. Bu katip efendisinin hayatının yazarken hiyeroglifleri şifrelenmiş bir şekilde 
oluşturmuştur. Ayrıca yazılan bazı hiyeroglifler o zamana kadar daha önce hiç kullanılmamıştı. Her ne kadar kriptografi bu şekilde ortaya çıksa da Milattan önce 1000 yılına kadar
çok da bir ilerleme kaydedememiştir. Dünyanın farklı farklı yerlerinde bağlantısız bir şekilde en temel biçimde kullanılmıştı ancak medeniyetlerin yıkılışıyla ileriki adımlara geçilememişti.

Ancak daha sonralarında(M.Ö. 6. yüzyıl) askeri istihbarat son derece önemli hale geldiğinden olsa gerek gelişimi hızlandı. O zamanda bu zamana istihbarat çok gelişti ve bununla 
beraber de kriptografi de bambaşka bir noktaya geldi. Bu yüksek lisans tezinin temeli de 5G ve Wireless teknolojilerinde kullanılmakta olan veya ilerde kullanılması muhtemel olan
kriptografik algoritmaların güvenlik ve performans analizini içermektedir.

Yapılan değerlendirmeler sonucunda algoritmalara ait farklı veriler farklı grafiklere dökülerek analiz edilecektir. Bu değerlendirmeler yapılırken algoritmaların private/public key kullanması ve algoritmaların verileri şifrelerken nasıl bir yol izleyeceği gibi konulara değinilecektir. Bu 
durumlar incelenirken günümüzde son derece popüler bir programlama dili olan C++ programlama dili kullanılacaktır. C++ 'ın yanı sıra veri güvenliğinde son derece önemli bir yere sahip olan 
OpenSSL 3.parti kütüphanesi de bu tez hayata geçirilirken kullanılmıştır. OpenSSL kütüphanesinin belli başlı elemanları verilerin güvenli taşınmasında kullanılan SSL/TLS protokolleri ve veriler taşınırken 
kimsenin eline geçmemesini için verilerin şifrelenmesini sağlayan veri taşıma protokolleridir. Bu protokollere ek olarak bu kütüphane veri şifreleme algoritmalarını da içerisinde
barındırmaktadır.

- 1.1 Şifreleme ve Deşifreleme 

Geçmişten günümüze veri korunumu son derece önemli olmuştur. Veri korunmasında en popüler yöntemlerden biri de veri şifrelemedir. Günümüzde Wireless,  Bulut teknolojileri çok 
yaygın bir şekilde kullanılması sadece faydalı görünse de aslında pek tehlikeyi de beraberinde getirmiştir. Özellikle bu tarz veri taşınması gereken alanlarda  Şifreleme veri 
korunumunda son derece önemli bir yere sahiptir. Şifrelemenin hayatımıza girmesiyle birlikte veriler daha güvenilir bir şekilde taşınır hale gelmiştir. 

Veri şifreleme kullanıcılara ait özel verilerin bir yerden bir başka yere taşınırken dışardan gelebilecek saldırılara karşı alınmış olan bilgi koruma önlemidir. Günümüzde son 
derece sık kullanılan bir veri koruma yöntemidir. Şifreleme pek çok farklı araç için yapılabilir ancak bu yüksek lisans tez kapsamında bizim dikkate alacağımız kısım yazıların 
ve dosyaların şifrelenmesi ve deşifrelenmesini temel alarak ortaya konulacaktır. 

Şifrelemenin en bilinen tiplerinden bir tanesi basit şifrelemedir. Bu tarz şifrelemelerde bir veri tüm kullanıcılara aynı şifreleme algoritmasını kullanarak gönderilmektedir. 
Bu yöntem şüphesiz ki güvenlik açısından son derece tehlikeli bir yöntemdir. Bu sebeple mümkün mertebe veri şifreleme algoritmalarının değişiklik göstermesi tercih edilmelidir. 
Basit şifrelemeden daha üstün olan bir yöntem ise anahtara dayalı şifreleme(Key Based Encryption(KYB)) yöntemidir. Bu tip şifrelemede rastgele üretilen anahtarlar 
kullanılarak yapılan şifrelemeye verilen isimdir. Bu anahtarlar algoritmaların tipine bağlı olarak public veya private key olabilir. Bir yazı şifrelenirken kullanılacak en basit 
yöntem anahtar kullanılarak yapılan şifrelemedir. Tahmin edebileceğimiz gibi anahtar karmaşıklığı arttıkça algoritmanın güvenliği de doğru oranlığı olarak artmaktadır. Günümüzde
basit şifreleme yerine KYB tipi şifreleme tercih edilmektedir. Anahtara dayalı şifreleme yönteminde genelde makine tarafından rastgele üretilmiş son derece karmaşık ve ancak 
matematiksel yollar kullanılarak bulunabilecek anahtarlarla yapılan şifrelemelerdir. Bu tarz anahtarları temel alarak yapılan şifrelemelere şifreleme algoritmaları bölümünde 
değinilecektir. 

Yazı şifreleme yapılırken temelde 3 temel eleman göze çarpmaktadır. Bunlar:
1-) Anahtar(Key)
2-) Şifrelenmemiş/Deşifrelenmiş Yazı(Plain Text)
3-) Şifrelenmiş Yazı(Cipher Text)

- 1.2 Şifreleme Algoritmaları

Bu yüksek lisans tez çalışması kapsamında OpenSSL kütüphanesinde bulunan algoritmalardan bazıları kullanılacaktır. Kullanılacak olan algoritmalar özellikle 5G ve Wireless 
teknolojilerinde sıkça tercih edilen algoritmalar olmasına dikkat edilmiştir. Örneğin OpenSSL kütüphanesinde bulunan DES, AES, RSA, DH, RC4 gibi algoritmalar 5G ve Wireless 
teknolojilerde son derece sık kullanılan veri şifreleme algoritmalarından bazılarıdır. Bu algoritmaların çalışma prensipleri ve kategori analizleri bölüm 1.2.1 ve bölüm 1.2.2'de yapılacaktır.
Şifreleme algoritmaları temelde asimetrik ve simetrik algoritma olmak üzere ikiye ayrılır. 

Simetrik algoritmada hem şifreleme hem de deşifreleme aynı anahtar kullanılarak yapılır. Ancak asimetrik algoritmalarda şifrelemede farklı anahtar deşifrelemede farklı anahtar 
kullanılmaktadır. Her ne kadar asimetrik algoritmalar çoğunlukla daha güvenlidir denilse de bu durum her zaman böyle değildir. Çünkü güvenlik seviyesinin etkileyen bir başka 
kavram da şifreleme algoritmasının kullanacağı anahtarın uzunluğudur. Anahtarların uzunlukları ve karmaşıklıkları arttıkça dolaylı olarak algoritmanın güvenliği de artmaktadır. 
Anahtar uzunlukları veri şifreleme algoritmalarına bağlı olarak değişmektedir. 

1.2.1 Simetrik Şifreleme Algoritmaları

Daha öncesinde değindiğim gibi simetrik şifreleme algoritmalarında tek bir anahtar(key) kullanılmaktadır. Bu anahtar hem şifrelemede hem de deşifrelemede kullandığında buna simetrik
şifreleme algoritması adı verilir. Yukarıdaki şekilde bununla ilgili bir örnek gösterilmiştir. Örnekte "hello" yazısı için şifreleme şifreleme ve deşifreleme yapılırsa anahtar 3 
olarak alındığı takdirde hem şifreleme hem de deşifreleme bir anahtar kullanılarak yapılacaktır.
hello -> khoor (Şifreleme Anahtarı(Encryption Key) : 3)
hello <- khoor (Deşifreleme Anahtarı(Decryption Key) : 3)
Şekil 1.1 -> Şifreleme resmi
Burada anahtar(key) 3 olduğundan dolayı sırasıyla tüm karakterler 3 adım ilerideki karakterlere dönüşerek şifreleme işlemini gerçekleştirecektir. Örneğin burada sırasıyla h harfi 3 alfabede ileri giderek
k, e harfi 3 adım ileri giderek h, l harfleri 3 adım giderek o harfi ve son olarak o harfi 3 adım ileri giderek r harfine dönüşmüştür.  Deşifreleme sırasında da durum tam tersidir. Şifrelemenmiş
durumdaki harfler sırasıyla alfabede geri gelerek deşifreleme işlemini gerçekleştirirler. Aşağıdaki şekildeki alfabede örneğin 'h' harfi için ne kadar ileri gidileceği gösterilmiştir.
Buna göre 3 adım ilerideki k harfi elde edilecektir. Ancak anahtar 5 olsaydı bu durumda 5 adım ileri gidilerek buradaki harf olan 'm' harfi elde edilecekti. 

Simetrik algoritmalar arasında en popüler olanları: DES, RC4, 3DES, AES, Seed, Camellia ve Chacha20 algoritmalarıdır. Bu algoritmaların çoğu bu yüksek lisans tezi kapsamında C++ 
kodunda OpenSSL kütüphanesinin desteğiyle test edilmiştir. Günümüzde diğerlerine göre daha az kullanılan olan DES algoritmasıdır. Popülerliği en yüksek olanlardan biri ise 
şüphesiz ki AES(Advanced Encryption Standards) algoritmasıdır. Bu yüksek lisans tezi kapsamında başta AES algoritması olmak üzere belirtilen tüm algoritmaların performans ve verimlilik
açısından analizleri yapılacaktır.

1.2.2 Asimetrik Şifreleme Algoritmaları

Asimetrik algoritmalarda daha öncesinde bahsettiğimiz gibi şifreleme için farklı, deşifreleme için farklı bir anahtar kullanılır. Örneğin simetrik algoritmada verdiğimiz örneği
Asimetrik algoritma için vericek olursak, bir "hello" yazısını ele alalım. Burada şifreleme kullanılan anahtar 5 olarak belirlenmiştir. Ancak deşifreleme için farklı bir anahtar 
belirlenmiştir ve bu anahtar değeri de 21 olacaktır. Bunun sebebi aslında alfabede şifreleme için ileri deşifreleme için ise geri gidilmesi yerine ileri gidilmeye devam edilerek
ilk baştaki harf elde edilecektir. Aşağıdaki şekilde bu şifrelemenin ve deşifrelemenin yapılması açıklanmıştır.

Simetrik algoritmalardan bazıları: DSA, RSA, DH, ECDSA, ECDH algoritmalarıdır. Bu algoritmaların çoğu bu yüksek lisans tezi kapsamında C++ kodunda OpenSSL kütüphanesinin desteğiyle 
test edilmiştir. 
DES algoritması anahtar uzunluğu diğerlerine göre daha az olan bir simetrik algoritmadır. AES ise son derece popüler ve anahtar uzunluğu duruma göre farklılık gösteren bir algoritmadır. AES algoritmasının 
anahtar uzunluğu 128 bit, 192 bit veya 256 bit olabilir. Bu algoritmanın kullanıldığı alana bağlı olarak farklı uzunluklarda anahtarla şifreleme yapabilme olanağı sağlamaktadır.
DH algoritmasında gene simetrik bir algoritmadır ancak bu algoritmanın 

1.2.3 Asimetrik/Simetrik Algoritmaların Avantajlarının/Dezavantajlarının İncelenmesi

Asimetrik algoritmalar yavaş çalışmasına karşın simetrik algoritmalara kıyasla daha güçlü olduklarından daha güvenli bir şifreleme yapılmasına imkan sağlarlar. Güçlü olmasının sebebi de temelde 
daha karmaşık ve uzun anahtarlar kullanmasından kaynaklanmaktadır bu da şüphesiz CPU kullanımını arttırmaktadır. Simetrik algoritmalarda ise deşifrelem için bir private key kullanılacağı için bu 
anahtarların paylaşılması gibi zorunluluk söz konusu değildir. Bu da bu algoritmaların daha güvenlikli bir şekilde çalışmasına imkan sağlamaktadır. Duruma bağlı seçilebilirlik açısından daha küçük 
verilerin taşınmasında özellikle verim kritik yerlerde tercih edilebilir. Verimin çok da önemli olmadığı alanlarda biraz daha büyük verilerin de taşınmasında kullanılabilir. Güvenliğin verimden 
çok daha önemli olduğu ayrıca bellek açısından bir problem yaşamıycağımız alanlar için büyük verilerin taşınmasında da kullanılabilir. Kısaca asimetrik algoritmalar simetriğe göre daha 
güvenilirdir ancak simetrik algoritmalara göre verimsizlerdir.

1.2.4 5G ve Wireless Teknolojilerde amaca uygun olan algoritmalar

5G teknolojisinin çalıştığı baz istasyonlarını temel iki önemli bölümden oluşur. Biri BBU diğeri ise RRU. BBU yazılımların yüklendiği board'u temsil ederken RRU ise sinyallerin
alınmasını sağlayan anten bölümünü temsil eder. 5G'nin kullanıldığı boardlar genellikle çok da büyük bellek alanına sahip olmazlar bu sebeple mümkün mertebe belleğin gereksiz yere
doldurulmaması son derece kritik öneme sahiptir. Diğer taraftan belleğin az kullanılmasını hedefliyip, veri güvenliğini tehlikeye atıcak durumlar oluşturmamak da son derece 
önemlidir. Bu sebeple bu alanda kullanılacak bir algoritma seçilirken, bu algoritma hem güvenlik açısından yeterli olmalı ancak belleği yüksek oranda da kullanmamalı. Bu yönden 
bakıldığında DES algoritması çok büyük bir bellek alanı kullanmamaktadır ancak diğer yandan çözülmesi günümüzde son derece kolay bir hale gelmiştir. Bu sebeple güvenlik açısında
güvenilir olmadığını söyleyebilir. Bu algoritmanın bir alternatifi olarak çıkarılan ve DES algoritmasına göre daha güvenilir olan ... algoritması hem bellek optimizasyonu hem 
güvenilirlik açısından Wireless teknolojilerinde son derece amaca uygun bir algoritmadır.

1.3 Public/Private Key

Asimetrik algoritmalarda hem Prıvate key hem de public key kullanılırken simetrik algoritmalarda sadece public key kullanıldığını daha önce söylemiştik. Private key sadece kullanıcılar tarafından
bilinen anahtarlardır. Örneğin  Bu da demek oluyor ki dünyada o kişiden başkası o public keye ait olan private keye sahip olmadığı için o veriyi deşifre edemez. Kısaca private key kişiye özgüdür. 
Bir veri kişinin public keyi kullanılarak şifrelenmiş ise ancak onun private keyi kullanılarak deşifrelenebilir. Tersi durumda eğer bir veri private key ile şifrelendiyse ancak o kişinin public 
keyi kullanılarak deşifrelenebilir. Bunun en önemli artısı mesajın üçüncü kişilerin eline geçmemiş olmasıdır. Bu şifreleme yöntemine Asimetrik şifreleme adı verilir. Private key kullanımı her ne  
kadar güvenlik açısında iyi olsa da verim açısından o kadar kötüdür. Burada diğer bir alternatif simetrik şifreleme yöntemini kullanmaktır. Bu durumda private key kullanımı söz konusu 
olmayacaktır. Her şifreleme hem de deşifrelemede public key kullanılması da verim olarak iyi bir durum olsa da güvenlik açısından son derece tehlikeli ve kırılması private key kullanan 
algoritmalara göre çok daha kolaydır.

1.3.1 Public Key ile Şifreleme

Public key kısaca hem şifrelemede hem şifrelemede hem de deşifrelemede kullanılan anahtar anlamına gelmektedir. Bu tip şifrelemelerin çözülmesinin her daim kolay olması düşünülse
de bu her zaman böyle değildir. Bu noktada devreye giren önemli bir parametre de şifreleme için kullanılacak anahtarın uzunluğu ve karmaşıklığıdır. Söz konusu anahtarın karmaşıklığı
arttıkça o şifrenin çözülmesi o oranda zorlaşacaktır. Simetrik algoritmalarda public key kullanarak şifreleme ve deşifreleme yapılmaktadır. 

1.3.2 Private Key ile Deşifrelme

Private Key aslında sadece deşifrelemede kullanılan anahtarlar için kullanıldığından ismi private keydir. Buna göre simetrik algoritmalarda private key kullanımın olmadığını söyleyebiliriz.
Private key sadece asimetrik algoritmalara özgü bir anahtardır. Private kullanılarak yapılan deşifreleme işlemi public key ile yapılan deşifreleme işlemine göre şüphesiz ki 
daha güvenliklidir. Çünkü public key hep şifreleme için hem de deşifreleme için var olduğundan dolayı dışardan gelebilecek saldırılara karşı çok daha güvenliksizdir. Ancak 
Her daim private key kullanan algoritmalar public key kullanan algoritmalara göre daha güvenilirdir demek de çok doğru değildir. Burada gene önemli olan parametreler anahtarın
karmaşıklığı ve uzunluğudur. Örneğin karmaşıklığı az olan bir anahtar private key kullanan bir algoritma bile olsa çözülmesi uzunluk değeri büyük olan ancak public key kullanan bir 
algoritmaya kıyasla çözülmesi daha kolay olabilir. 

1.4 5G Teknolojisinin gelişimi













