Tez Konusu: 5G ve Wireless Teknolojilerinde kullanılan Şifreleme Algoritmaların Analizi

İçindekiler:
1-) Yüksek Lisans Tezindeki Kısaltmalar
AES -> Advanced Encryption Standards
RSA -> Rivest-Shamir-Adleman
DES -> Data Encryption Standards
RC4 -> Rivest Encryption 4 
DSA -> Digital Signature Algorithm
DH -> Diffie-Helman

1-) Özet/ Abstract

Tarih boyunca insanlar birbirlere gizli verileri gönderirken özellikle 3.kişilerin ellerine geçmemesini hedeflenmiştir.
Söz konusu veriler gizlenirken geçmişten günümüze pek çok farklı yöntem kullanılmıştır. Buna verilebilecek en önemli örneklerden biri Almanların 2.Dünya savaşında haberleşmede kullanmış olduğu Enigma makinesidir. 
Enigma her ne kadar şimdiki teknolojiye göre son derece kırılması kolay bir şifreleme sistemine sahipse de o dönem bilgisayarın henüz bulunmayışından dolayı çözmesi son derece zor bir algoritmaya
sahipti. O zamandan günümüze şifreleme algoritmalarında ciddi anlamda bir gelişme göze çarpmaktadır. Bu tez çalışmasında da hayatımıza yeni yeni girmekte olan 5G teknolojilerde hangi algoritmaların kullanıma daha elverişli 
olduğunun analizi yapılmıştır. Şifreleme algoritmalarındaki gelişmelerin yanı sıra verilerin gönderim hızı da ciddi anlamda artmıştır. Özellikle 5G teknolojisinin hayatımıza girmesiyle birlikte 4G içerisinde maksimum hızı 300 Mbps olan mobil 
cihazlar 5000 Mbps hıza ulaşmıştır. Bunun en önemli katkılarından biri 5G teknolojisi ile birlikte Nesnelerin interneti(IoT/Internet of Things) ortamına zemin hazırlanmıştır.  
Günümüzde 5G teknolojisi başta Çin olmak üzere pek çok baz istasyonunda kullanılmaktadır. 5G teknolojisinin sık kullanımıyla birlikte
Huawei, Ulak, Ericsson ve benzeri firmalar, baz istasyonları yoluyla haberleşen çeşitli cihazların çeşitli verilerini almayı hedeflemektedir. 
Söz konusu veriler alınırken bu verilerin üçüncü kişilerin eline geçmemesi başta KVKK(Kişisel Verilerin Korunumu Kanunu) ihlali olmak üzere pek çok açıdan son derece önemlidir. 
Bu sebeple telekominikasyon firmaları bu verilerin şifrelenmesinde çeşitli algoritmalar kullanmaktadır. Şifrelenmesi hedeflenen bu veriler FTP(File Transfer Protocol) ile taşınacak olan dosyalar, login aşamasında kullanılancak olan 
username veya password gibi güvenli taşınması gereken bir yazı veya en basitinden çeşitli cihazların baz istasyonlarına gönderdiği veya aldığı bir binary veri olabilir. 
Bu tez çalışmasında verilerin şifrelenmesinde kullanılan söz konusu algoritmaların farklı durumlar için temelde performans olmak üzere birkaç açıdan incelenip sonuçların değerlendirilmesi hedeflenmektedir. 
Bu değerlendirme işlemi yapılırken sadece veri şifreleme algoritmalarında değil ve aynı zamanda da güvenli socket programlamada kullanılan TLS/SSL gibi protokollerin de bulunduğu, son derece popüler 
bir üçüncü parti kütüphane olan, OpenSSL kütüphanesi kullanılmıştır. 
OpenSSL kütüphanesinde bulunan ve bu tez çalışması kapsamında incelenecek olan bazı algoritmalar: DSA, RSA, AES, Seed, Cast5, Dh, Camellia, Chacha20 şeklinde sıralanabilir.
Bu yüksek lisana tezi kapsamında sıralanan algoritmaların çalışma prensipleri detaylı bir şekilde açıklanacaktır. Bu sayede konu hakkında hiçbir bilgisi olmayan biri bile bu yüksek lisans tezini okuyarak konuyu 
anlayabilecektir. Bu algoritmaları incelerken öncelikli kategori olarak incelenmesi son derece önemlidir. 
Kategori kapsamında ele alınacak kısımlar ise kullanılacak olan algoritmaların hangilerinin simetrik hangilerinin asimetrik olmasına bağlı olarak kullandıkları private mı public mi olmasının incelenmesi ve elde 
edilen sonuçların değerlendirilmesi yapılmıştır. 
Private Key kullanan algoritmalar çoğunlukla public key kullanan algoritmalara göre daha güvenli olsa da durum her zaman böyle değildir. Bu tez çalışması kapsamında 5G teknolojilerinde yazı, bitsel veri veya 
dosya taşınmasında hangi şifreleme 
algoritmalarının daha verimli, uyumlu ve güvenilir olduğu incelenerek değerlendirilecektir. Burada değerlendirilecek parametrelerden en önemlisi incelenecek algoritmaların güvenlik açısından yeterliliğidir. 
Bunun nedeni bu tarz gizli verilerin üçüncü şahısların eline geçmesi durumunda hem KVKK'nın ihlal durumu söz konusu olabilir aynı zamanda da bu verilerin kötüye kullanımı durumunda hem 
kişilere hem de kurumlara ciddi sonuçlar da meydana gelebilir. Bu kapsamda algoritmaların bize sunduğu hizmetler son derece önemli bir yere sahiptir. Bazı algoritmalar çok daha karmaşık anahtarlar kullanırken 
bazı algoritmalar anlaşılması çok daha kolay anahtar değerleri kullanmaktadır. Bu durum da gene algoritmaların seçilebilirliğini doğrudan etkilemektedir. İkinci önemli parametre ise şüphesiz ki verimliliktir 
çünkü, algoritmaların sadece kırılması zor olması özellikle söz konusu 5G ve Wireless teknolojileri olduğunda tek başına yeterli değildir. 
Kırılmasının zor olmasının yanında Baz istasyonlarında olmazsa olmaz bir eleman olan BBU bölümünün bellek alanı şüphesiz ki sınırlı ve efektif kullanımı gerektiğinden dolayı, algoritmaların 
en az güvenliği kadar verimliliği ve hızı da son derece önemli parametrelerdir. Kısaca özetlemek gerekirse hem 3.kişiler tarafından kolay bulunamayacak hem sınırlı bellek alanımız için sorun çıkarmayacak hem de 
kullanıcıya sunduğu hizmet açısından yeterli olacak algoritmalar diğerlerinden daha üstün olarak bu yüksek lisans tezi kapsamında değerlendirilmiştir.
Bu tez çalışmasında söz konusu analizler yapılırken C++ programlama dilinin özellikleri yoğun bir şekilde kullanılarak sonuçlar olabildiğince kesine yakın bir şekilde elde edilecektir. 
Burada C++ dilinin neden tercih edileceğinden bu tez kapsamında detaylı bir şekilde bahsedilecektir. Özetle bu tez kapsamında OpenSSL üçüncü parti kütüphanesinin C++ diline entegrasyonu 
ile birlikte çeşitli parametreler değiştirilerek(Şifrelenicek yazının uzunluğu, şifrelenecek dosya büyüklüğü vb.) hangi algoritma veya algoritmaların entegrasyon açısından 5G ve Wireless 
teknolojilerine daha uygun olduğunun tespit edilip elde edilen sonuçlardan grafiğe dökülmüştür. Grafiğe dökülen sonuçlar son durumda değerlendirilip bir sonuca ulaşılmıştır. Sonuca ulaşılırken C++ programlama dilinin modern araçları kullanılarak algoritmaların çalışma hızı hesaplanmıştır. 

2-) Teşekkür
Bana desteklerini esirgemeyen danışman hocam Dr. Öğr. Gör. Uğur Kesen ve çalışmakta olduğum Huawei Telekominikasyona tesekkür ederim.
3-) Giriş
	- Problemin tanımı ve Analizi
	Geçmişten günümüze veri güvenliği pek çok farklı alanda son derece önemli olmuştur. Mobil cihazların hayatımıza girişiyle beraber Cloud teknolojileri gibi verilerin depo edilmesinde kullanılan pek çok farklı 
	yöntem de hayatımıza girmiş oldu. Cloud teknolojisinin yanı sıra verilerin mobil cihazlar arasında taşınmasında kullanılan Wireless teknolojisi hayatımıza girmiştir. Bu sözü edilen gelişmeler her ne kadar 
        pek çok  açıdan iyi olsa da bu tarz depolama alanları ve cihazlar arası veri tanışmasının hayatımıza girişiyle birlikte veri güvenliği tehlikesi de aynı oranda artmıştır. Hayatımıza giren diğer bir önemli 
        teknoloji ise interneti bulunmasıyla birlikte gelişimi hızlanan 3G teknolojisidir. Internet günümüzde son derece önemli bir yere sahip olmasına karşın faydanın yanında güvenlik tehlikesini de beraberinde 
        getirmektedir. Bu sebeplerden dolayı verilerin güvenliğinin güvenliklerinin sağlanması için çeşitli yöntemler kullanılmaya başlandı. Bu yöntemlerden biri de şüphesiz veri şifrelemede kullanılan 
        algoritmalardır. Bu tez çalışması da temelde bu 
	algoritmaların günümüz teknolojisinde son derece önemli bir yere sahip olan Wireless ve 5G teknolojilerinde kullanılan şifreleme algoritmalarını incelemektedir. Yapılan incelemeler sonucunda da hangi 
        algoritmanın uygunluk açısından Wireless ve 5G  teknolojilerine daha uygun olduğunun bulunmasıdır. Bunu yaparken algoritmanın verimliliği güvenilirliği temelde önemli iki parametre olacaktır. Testler 
        yapılırken şifrelenecek verinin uzunluğu karmaşıklığı gibi farklı durumları incelenerek bir sonuca ulaşılmıştır. Yapılan değerlendirmeler sonucunda algoritmalara ait farklı veriler farklı grafiklere 
        dökülerek analiz edilecektir. Bunu yaparken günümüzde son derece popüler bir programlama dili olan C++ dili kullanılacaktır. C++ 'ın yanı sıra OpenSSL ... 
	- Tezin literatür katkısı ve yenilikleri
	Her ne kadar veri şifreleme algoritmalarının incelemesinin yapıldığı tezler ve makaleler bu zamana kadar yazılmış olsa da daha önce bu algoritmalarının incelemesini doğrudan 5G ve Wireless teknolojileri 
        üzerinden yapan detaylı bir yüksek lisans tezi ortaya konulamamıştır. Bu noktada hayata geçirmiş olduğum bu yüksek lisans tez çalışmasında araştırmacılara veya bu alanda daha da ilerleyip doktora 
        düzeyinde bir makale ortaya koymak isteyen doktora öğrencilerine destek olmak için önemli yere sahip olacaktır. Bu alanda çalışma yapıcak kişilerin yanı sıra sektörde haberleşme alanında çalışan firma 
        çalışanların da bu alanda bilgi sahibi olmasına da olanak sağlayacaktır. Bununla birlikte firmaların da bu sektördeki muhtemel büyümeleri hızlanacaktır. Ülkemiz açısından bakıldığında ise, 5G teknoloji 
        çok az oranda kullanılmasının bir nedeni de veri güvenliğinin nasıl sağlanılacağının tam olarak bilinmesinden kaynaklanmaktadır. Bu düşünüldüğünde de bu yüksek lisans tez çalışmasıyla birlikte güvenlik 
        tarafı da Türkiye'deki firmalarca daha net bir şekilde anlaşılması mümkün olabilir. Kısaca bu yüksek lisans tez çalışması hem akademik hem sektörel anlamda son derece önemli bir literatür katkısı ve 
        yenilik ortaya koyacaktır.
	- Daha önceden bu konuda yapılmış olan çalışmaların incelenmesi
		- 
		- 
4-) Arkaplan bilgiler
	- Neden C++ dili kullaniliyor?
		C++ dili son derece zor ve karmaşık bir dil olmasına rağmen programlama dillerinin reytinglerini karşılaştıran en popüler web sitelerinden biri olan Tiobe index'de ikinic sıraya yükselmiştir. Bu da 
		gösteriyor ki C++ dilinin 
		popülerliği son derece yüksek. C++ dili gömülü yazılım, Oyun geliştirilmesi, Yapay zeka sistemlerinin geliştirilmesi ve savunma sanayi uygulamaları gibi pek çok alanda son derece yaygın kullanılan 
		bir programlama dilidir.
	 	C++ dilinin kullanim sebeplerinden başka bir tanesi pek cok diger programlama diline kiyasla cok daha hızlı çalışmasıdır. Bununla birlikte verimin kritik olduğu uygulamalarda C++ vazgeçilmez bir 
		programlama dili konumundadır. 
                Bunun yanı sıra sürekli gelişmekte olan bir dil olması da seçilebilirlik olarak C++ dilini ön planda tutmaktadır. Her 3 senede bir toplanan C++ Standart Komitesi dile sürekli ekleme yapmaktadır. Bu 
		da dilin sürekli olarak 
                gelişmekte olan teknolojiye uyumlu olarak kalmasını sağlamaktadır. Özet geçmek gerekirse C++ dilinin bu tez çalışmasında tercih edilme sebebi sektörde yaygın bir şekilde kullanılması ve dilin 
		sürekli gelişmesidir. Gelişmekte olan
		teknolojiyle beraber C++ dilinin sahip olduğu araçlarda da artmaktadır. Bunun en önemli nedenlerinden biri daha önce de bahsedildiği gibi her 3 senede bir toplanan C++ standart komitesidir. Bundan 
		dolayı C++ dili ortama uyum 
		sağlama konusunda pek çok programlama dilinden üstündür diyebiliriz. Bu da gene C++ dilinin seçilebilirlik olarak üstün olduğu bir diğer noktadır.
		- Pek çok sektörde kullanılıyor olması
		C++ programlama dili savunma sanayi, gömülü yazılım, haberleşme teknolojileri, yapay zeka uygulamaları ve oyun tasarımları gibi pek çok farklı alanda kullanılmaktadır. Özellikle verimin son derece 
		kritik olduğu sektörlerde C++ 
		neredeyse vazgeçilmez bir programlama dilidir.
                - Optimizasyonunun yüksek olması
		C++, pek çok dile göre çok daha hızlı çalıştığından dolayı seçilebilirlik açısından verimin kritik olduğu yerlerde çok üstün olduğu şüphesizdir.
		- Sürekli gelişmekte olan bir dil olması
		- Yeni teknolojileri uyum sağlama açısından uygun olması
	- Yapılmış olan benzer çalışmalar
                1-) Shancang Lia, Li Da Xub ve Shanshan Zhaoe tarafından yazılmış olan 5G Internet of Things: A survey makalesi 5G teknolojilerinde IoT kullanımı hakkında önemli bilgiler vermektedir.
		2-) Security for 4G and 5G Cellular Networks: A Survey of Existing Authentication and Privacy
		3-) Analysis the Structures of Some Symmetric Cipher Algorithms Suitable for the Security of IoT Devices
                4-) Yang J, Thomas J, Alexander M., Spectral analysis of ZUC-256, In: Proceedings of the 27th Annual Fast Software Encryption Conference, 2020.
		5-) Combined and Robust SNOW-ZUC Algorithm Based on Chaotic System
		6-) Differential Attacks Against Stream Cipher ZUC, in Advances in Cryptology 
		7-) Comparative Study of Vulnerabilities in LTE Cryptographic Algorithm, International Journal of Computer Applications
		8-) An overview of cryptographic primitives for possible use in 5G and beyond. 
	- Konu hakkında ön bilgi
		- 5G ve Wireless Nedir?
		- IoT cihazlarda 5G teknolojisinin önemi
		- BBU ve RRU Nedir?
		Baz istasyonlarında 2 temel komponent bulunmaktadır. Bunlar BBU ve RRU'dur. Sinyal almaya yarıyan baz istasyonu bölümüne RRU denir. 
		- Simetrik ve Asimetrik Veri şifreleme Algoritmaları
		Temelde şifreleme deşifrelemede aynı anahtarın kullanıldığı algoritmalara simetrik algoritma ve hep şifreleme hem de deşifreleme işlemi için farklı şifreleme anahtarının kullanıldığı algoritmalara 
	        asimetrik algoritma adı verilir. 
		 
		- Hashing Nedir?
			- Fingerprint
			- MAC Msg Auth Code 
			- Authentication
		- Data Integrity
		- Encryption(Şifreleme) ve Decryption(Deşifreleme)
		Bir yazının şifrelenmeden önceki hali Plain Text olarak adlandırılırken, bu yazının şifrelendikten sonraki hali Cipher Text olarak isimlendirilir. Plain Text aynı zamanda Şifrelenmiş bir Cipher 
		Text'in deşifrelenmesiyle elde edilen yazı olarak da isimlendirilebilir. Şifrelemenin en bilinen tiplerinden biri basit şifrelemedir. Bu şifreleme bir veri tüm kullanıcılara aynı şifreleme 
		algoritması kullanılarak gönderilmektedir. Bu şüphesiz ki güvenlik açısından son derece tehlikeli bir yöntemdir. Bu sebeple mümkün mertebe veri şifreleme algoritmalarının değişiklik göstermesi 
		tercih edilmelidir. Basit şifrelemeye göre daha üstün olan algoritma olan Key Based Encryption(Anahtar tabanlı şifreleme) daha iyi bir yöntemdir. Bu tip şifrelemede rastgele üretilen anahtarlar 
                kullanılarak yapılan şifrelemeye verilen isimdir. Bu anahtarlar algoritmaların tipine bağlı olarak public veya private key olabilir. 
		- Asimetrik - Simetrik Algoritmaların Avantajlar ve Dezavantajları olarak incelenmesi
		Simetrik algoritmalarda hem şifreleme hem de deşifreleme için aynı anahtar kullanılır. Asimetrik algoritmalarda ise şifreleme için ayrı key, deşifreleme için ayrı key kullanılmaktadır. Aşağıda 		simetrik ve asimetrik algoritmalar arası farkları açıklayan bir örnek bulunmaktadır. 
		Here is the alphabeth : a b c d e f g h i j k l m n o p q r s t u v w x y z
		Simetrik algoritma için "hello" yazısı için şifreleme ve deşifreleme yapılırsa anahtar 3 olarak alındığı takdirde hem şifreleme hem de deşifreleme bir anahtar kullanılarak yapılacaktır.
		hello -> khoor (Şifreleme Anahtarı : 3)
		hello <- khoor (Deşifreleme Anahtarı : 3)
		Burada anahtar 3 olduğundan dolayı sırasıyle tüm karakterler 3 adım ileride karakterlere dönüşerek şifreleme işlemini gerçekleştirirler. Örneğin burada sırasıyla h harfi 3 alfabede ileri giderek 
                k, e harfi 3 adım ileri giderek h, l harfleri 3 adım giderek o harfi ve son olarak o harfi 3 adım ileri giderek r harfine dönüşmüştür.  Deşifreleme sırasında da durum tam tersidir. Şifrelemenmiş 
		durumdaki harfler sırasıyla alfabede geri gelerek deşifreleme işlemini gerçekleştirirler. Asimetrik algoritmalarda ise durum biraz daha farklıdır. 
		hello -> mjqqt (Şifreleme Anahtarı : 5)
		hello <- mjqqt (Deşifreleme Anahtarı : 21)
		Burada görüldüğü gibi anahtarlar farklıdır. Asimetrik algoritmalarda deşifreleme yapılırken simetrik algoritmalarda olduğu gibi geriye doğru gidilmez, onun yerine ileri doğru gidilerek aynı 
                noktaya gelinir. Burada alfabede z'den sonra a geleceği için başa dönülüp ters taraftan hedef harfe ulaşılır. Örneğin h karakteri m karakterine dönüştürülürken alfabede 5 adım ileri gidilirken, m 
                harfinin tekrar h harfini dönmesi için 21 karakter ileriye gitmesi gerekmektedir. Aynı durum diğer karakterler için de geçerlidir. Burada 5 ve 21 anahtarlarının matematiksel olarak bağlantılı 
                olduğu unutulmalıdır yani bu değerler değiştirildiği zaman algoritma doğru çalışmaz. Burada Deşifreleme anahtarıyla şifreleme anahtarının yer değiştirmesiyle algoritmanın çalışmasında herhangi bir 
                değişiklik olmaz. Örneğin şifrelem anahtarı 21 ve deşifreleme anahtarı 5 olsaydı algoritma gene istenildiği gibi çalışırdı. Bu tip algoritmalarda şifreleme için bir public key belirlenir bu herkes 
		tarafından bilindiğinden dolayı buna public key adı verilir ancak bunun yanında deşifreleme için de private key verilir ve bu private key kişiye özeldir.
		Simetrik Algoritmaların Avantajları ve Dezavantajları
		simetrik algoritmalar asimetrik algoritmalara kıyasla daha hızlı çalışırlar. Simetrik algoritmalarda belirlenen anahtar paylaşılmalıdır bu da güvenlik açısından tehlike oluşturmaktadır. 
                Seçilebilirlik açısından bu tip algoritmalar büyük verilerin taşınmasında daha kullanımı ideal algoritmalardır. Diğer taraftan küçük veriler taşınırken kullanımı çok da mantıklı olmaz. Kısaca 
		simetrik algoritmalar hızlı çalışırlar ve verimlidirler ancak asimetrik algoritmalara kıyasla daha az güvenlilerdir.
		Asimetrik Algoritmaların Avantajları ve Dezavantajları
		Asimetrik algoritmalar yavaş çalışmasına karşın simetrik algoritmalara kıyasla daha güçlü olduklarından daha güvenli bir şifreleme yapılmasına imkan sağlarlar. Güçlü olmasının sebebi de temelde 
                daha karmaşık ve uzun anahtarlar kullanmasından kaynaklanmaktadır bu da şüphesiz CPU kullanımını arttırmaktadır. Simetrik algoritmalarda ise deşifrelem için bir private key kullanılacağı için bu 
		anahtarların paylaşılması gibi zorunluluk söz konusu değildir. Bu da bu algoritmaların daha güvenlikli bir şekilde çalışmasına imkan sağlamaktadır. Duruma bağlı seçilebilirlik açısından daha küçük 
		verilerin taşınmasında özellikle verim kritik yerlerde tercih edilebilir. Verimin çok da önemli olmadığı alanlarda biraz daha büyük verilerin de taşınmasında kullanılabilir. Güvenliğin verimden 
                çok daha önemli olduğu ayrıca bellek açısından bir problem yaşamıycağımız alanlar için büyük verilerin taşınmasında da kullanılabilir. Kısaca asimetrik algoritmalar simetriğe göre daha 
                 güvenilirdir ancak simetrik algoritmalara göre verimsizlerdir.
                - Asimetrik algoritma tipleri
			- DSA
			- RSA - Tavsiye edilen anahtar uzunluğu: 2048 bit
			- Dh(Diffie-Helman)
			- ECDSA
			- ECDH
		- Simetrik algoritma tipleri
			- DES    56 bit anahtar
			- RC4   128 bit anahtar
			- 3DES  168 bit anahtar
			- AES   128, 192 veya 256 bit anahtar
			- ChaCha20   128 veya 256 bit anahtar 
                        - Seed 
		- Private/Public Key
		Asimetrik algoritmalarda hem Prıvate key hem de public key kullanılırken simetrik algoritmalarda sadece public key kullanıldığını daha önce söylemiştik. Private key sadece kullanıcılar tarafından
                bilinen anahtarlardır. Örneğin  Bu da demek oluyor ki dünyada o kişiden başkası o public keye ait olan private keye sahip olmadığı için o veriyi deşifre edemez. Kısaca private key kişiye özgüdür. 
                Bir veri kişinin public keyi kullanılarak şifrelenmiş ise ancak onun private keyi kullanılarak deşifrelenebilir. Tersi durumda eğer bir veri private key ile şifrelendiyse ancak o kişinin public 
                keyi kullanılarak deşifrelenebilir. Bunun en önemli artısı mesajın üçüncü kişilerin eline geçmemiş olmasıdır. Bu şifreleme yöntemine Asimetrik şifreleme adı verilir. Private key kullanımı her ne k 
                kadar güvenlik açısında iyi olsa da verim açısından o kadar kötüdür. Burada diğer bir alternatif simetrik şifreleme yöntemini kullanmaktır. Bu durumda private key kullanımı söz konusu 
                olmayacaktır. Her şifreleme hem de deşifrelemede public key kullanılması da verim olarak iyi bir durum olsa da güvenlik açısından son derece tehlikeli ve kırılması private key kullanan 
		algoritmalara göre çok daha kolaydır. 
		- Hibrit Şifreleme
		Bu şifreleme tipi aslında asimetrik ve simetrik şifrelemenin bir karmasıdır. SSL ve TLS haberleşme protokolleri de aslında buna benzer bir yol izlemektedir. Eğer bu tip bir şifreleme 
                kullanılıyorsa bu durumda hem hızlı çalışan hem de güvenilir bir sonuç elde edileceğini söyleyebiliriz.
                Şifreleme için ise daima bir public key kullanımı söz konusudur. Public keyler Simetrik algoritmalarda hep şifreleme hem de de deşifrelemede kullanılırken Asimetrik algoritmalarda
		sadece şifrelemede kullanılır.
		- SSL/TLS Protokolleri
		Bulk Data'nın simetrik şifrelemenmesi Confidentiality özelliğini mümkün kılmaktadır.
			- PKI(Public Key Infrastructure)
			Bu bir üçgenle ifade edilip 3 ana parçadan oluşur. Bunlar:
			-> Client
			Güvenli bir bağlantı kurup kimliği doğrular. Client genellikle işletim sistemi olur.
			-> Server
			Kimliği doğrulaması gerekmektedir. Server genellikle yazılım, aplikasyon veya program olabilir.
			-> Certificate Authority 
			Sertifika üretir. Kimliği doğrular. Code Signing CAs
			
		- OpenSSL Kütüphanesi
		OpenSSL Kütüphanesi TLS ve SSL gibi haberleşme protokollerinin yanı sıra Asimetrik ve simetrik şifreleme algoritmalarını içeren başta haberleşme alanı olmak üzere pek alanda son derece sık 
		kullanılan bir 3.parti kütüphanedir. SSL ve TLS gibi kullanıcı internette gezinirken bir tünel görevi görmektedir. Örneğin veriler serverdan clienta taşındığı sırada verinin güvenliği tahlikede 
                olabilir. Bunun sebebi verinin nasıl bir yol izlediğinin net bilinememesi ve taşınma sırasında 3.kişilerin eline geçme tehlikesidir.   
		- OpenSSL Kütüphanesinde bulunan ve bu tez çalışmasında kullanılacak olan algoritmalar
		Bunun yüksek lisans tez kapsamında OpenSSL kütüphanesinde bulunan algoritmalar incelenmiştir. Bu algoritmalardan C++ konu yazılırken de kullanılan 	
		algoritmalar: AES, DSA, RSA, Chacha20, Dh, Camellia gibi algoritmalardır. Bu algoritmaların kullanıldığı C++ programı yazılmadan önce bu algoritmaları detaylı bir şekilde tanıyalım:
		- DES(Data Encryption Standards)
                
		- AES(Advanced Encryption Standard) Algorithm
		AES algoritması, 2001 yılında ABD Ulusal Standart ve Teknoloji Enstitüsü(NIST) tarafından bulunan veri şifrelemede sıkça kullanılan simetrik bir şifreleme algoritmasıdır. Sadece public key 
		kullanmasına karşın güvenilir simetrik algoritmalardan biridir. Özellikle de DES algoritmasının kırılmasıyla birlikte bu algoritmanın bulunmasının yolu açılmıştır. Bu algoritma DES algoritmasına 
		göre daha güvenilir olduğundan tercih edilmektedir. Günümüzde DES algoritması çok kullanılmaktadır bunun en önemli nedeni ise AES algoritmasına kıyasla yaklaşık olarak 6 kat daha hızlı 
		çalışmaktadır. Buna göre veri güvenliğinin çok da önemli olmadığı hızın yani performansın önemli olduğu yerlerde DES algoritması tercih edilirken, performanstan çok veri güvenliğinin önemli olduğu 
                alanlarda ise AES algoritması daha yaygın bir şekilde kullanılmaktadır. Bu algoritmada private key uzunlukları değişiklik gösterebilir. Örneğin 128 bit, 192 bit veya 256 bitlik private keyler ile 
                bu algoritma kullanılabilir. Şüphesiz anahtar uzunluğu arttıkça algoritmanın çözülmesi de zorlaşmakla birlikte üretim aşaması dolasıyla verimi de düşmektedir.
		AES algoritmasında yazı şifrelenirken sırasıyla aşağıdaki adımlar aşağıdaki gibidir:
			-> Şifrelenecek olan veri bir matris haline getirilir. Örneğin 128 bitlik bir anahtar kullanılmak isteniyorsa bu durumda 4x4'lük bir matris kullanılır. Burada matrisin her bir elemanı 8 
                        bit olarak kabul edildiği takdirde 16x8 = 128 bit sonucu elde edilir. 4x4'lük bir matris için her sütun bir kelimeyi ifade ederken her bir kelime de 32 bit demektir.   
		- Seed 
			-> Seed algoritması 1998 yılından KISA(Korean Internet & Security Agency) ve bir grup uzman tarafından geliştirilen 128 bitlik simetrik bir algoritmadır. 
			-> Bu algoritma Güney Kore'de pek çok güvenlik sisteminde kullanılmıştır.
			-> Bu algoritmanın kısaca teknik özelliklerini sıralamak gerekirse:
				-> 16 Round Feistel yapısına sahiptir.
				-> 128 bit giriş/ çıkış veri bloğu boyutundadır.
				-> 128 bitlik anahtar uzunluğuna sahiptir.
				-> Bilinen saldırılara karşı güçlüdür.
				-> İki adet 8 x 8 S-box kullanır.
				-> XOR ve modüler eklemede karmaşıktır.
		- Dh(Diffie - Hellman) Algorithm
			-> İki kullanıcı haberleşirken kendi belirlemiş oldukları public değerleri kullanarak verileri taşırlar. Şüphesiz bu veriler taşınırken başkalarının eline geçmesin amaçlı bir durumdur.
			-> Bu algoritmada asla asıl değer gönderilmez. Bunun yerine kullanıcıların kendi belirledikleri değerler gönderilir.
			-> Bu algoritmada iki kullanıcı arası verilerin taşınması sırasıyla aşağıdaki gibi yapılacaktır.
				-> İki kullanıcı da kendine özgü rastgele üretilmiş Private Key kullanır.. 
				-> Kullanıcıların ortak kullanıcağı iki sayı belirlenir. Bunlardan biri asal sayı(P) diğeri ise buna ait olan üretici sayıdır(G). Bu sayıların kullanıcılarda ortak olması olması 
                                önemli bir detaydır. 
			        -> Bu değerler belirlendikten sonra üretici değerin(P) birbirine veri göndericek olan kullanıcılara göre farklılık gösteren Private Key inci kuvveti alınır. Buradan elde edilen 
				sonucun da daha önceden belirlenmiş olan asal sayı ile modu alınır. Örneğin X kişisi için Private Key değeri 5, Y kişisi için ise Private key değeri 4 olarak alınırsa aşağıdaki bir 
                                işlem yapılabilir:
				X Kişisi : (6 ^ Private Key(X) = 5) MOD 13 = 2 -> Public Key(X) = 2
				Y Kişisi : (6 ^ Private Key(Y) = 4) MOD 13 = 9 -> Public Key(Y) = 9
				Yukarıda elde edilen sonuçlar public key değerleridir, yani üçüncü kişlerin göreceği değerlerdir.
				Elde edilen public key değerleri çaprazlanır. Yani çözümlenme sırasında Y kişisine ait olan Public key = 9 değeri
				X kişinin private key inci kuvveti alınır ve buluna sayısının üretilmiş olan asal sayı değeri(P = 13) ile modu alınır. Aynı durum Y kişisi için de yapılır. Söz konusu işlemlerin 
                                uygulamalı gösterimi aşağıdaki gibidir:
                                X kişisi : (Public Key(Y) = 9 ^ Private Key(X) = 5) MOD 13 -> Shared Key(X,Y) = 3
				Y kişisi : (Public Key(X) = 2 ^ Private Key(Y) = 4) MOD 13 -> Shared Key(X,Y) = 3
				şüphesiz ki Shared Key değerleri adından da anlaşılabileceği gibi ortam bir anahtardır. Burada amaç bu kişilerin birbirlerine gönderdikleri mesajları sadece kendilerinin 
				çözebilmesini sağlamaktadır. Bu sayede bu mesajların 3.kişilerin eline geçmesi söz konusu olamaz çünkü dışarıdan tek biline asal sayı değeri(P), üretici değer(G) ve Public Key 
                                değerleri bilinmektedir. Bu değerlerin de bilinmesi şifreli verilerin çözümlenmesini mümkün kılmaz. 
				-> DH algoritması ne kadar güvenli?
					- DH'nin güvenliği Ayrık Logaritma problemine bağlıdır
                                	• Üsteleme:
                                	G ve X göz önüne alındığında, N değerini bulmak kolaydır.  G ^ X = N 
                                	• Logaritma:
					G ve N göz önüne alındığında, X'i bulmak zordur
					- Ayrık Açığa Çıkarma:				           G ^ X MOD P = N 
					G, X, P göz önüne alındığında, N'yi bulmak kolaydır.  
					- Ayrık Logaritma:
						• G, P, N göz önüne alındığında, X'i bulmak mümkün değil.
						• Tek yöntem, mümkün olan her kombinasyonu denemektir. (yani kaba kuvvet)	
		- RSA(Rivest - Shamir - Adleman) Algorithm
		RSA Algoritmasının bazı özellikleri aşağıdaki gibidir:
			-> Bu algoritmanın adı aslında yaratıcısı olan Ron Rivest, Adi Shamir ve Leonard Adleman kişilerin soyadlarını almıştır.
			-> En yaygın şifreleme algoritmalarından biridir.
			-> Asimetrik bir şifreleme algoritmasıdır.
			-> Asal çarpanlara dayalı bir şifreleme prensibine sahiptir.
			-> Bu algoritmada iki farklı anahtar oluşturulur. Bu anahtarlardan biri şifreleme için kullanılırken diğeri deşifreleme için kullanılır.
		Her algoritmada olduğu gibi RSA algoritmasında da bir anahtar üretimi söz konusudur. Anahtar üretilirken belli başlı adımlar bulunmaktadır.
			-> İki adet asal sayı seçilir. Seçilen asal sayıların (P, Q) olsun.
			-> Bir ürün hesaplanır. (P * Q)
			-> Bir Totient hesaplanır. (T) = (P - 1) * (Q - 1)
			-> Bir Public Key Seçilir  (E)
				-> Seçilen Public Key Asal olmak zorunda  
				-> Totient değerinden küçük olmaz zorunda (T > E)
				-> Totient değerinin çarpanı olmamalı
			-> Bir Private Key Seçilir (D)
				-> D ve E değerinin T değerine bölümü 1 olmalı
				-> (D * E) MOD T = 1
		Bu Koşullara göre bir örnek oluşturulursa:
			-> P ve Q asaal sayıları sırasıyla 7 ve 19 şeklinde alınsın 
			-> Ürün değeri(P * Q) değeri 133 olarak hesaplanır.
			-> Totient değeri(T) 108 olarak hesaplanır.
			-> Public Key değeri(E), koşulları sağlaması açısından 29 olarak alınır.
			-> Private Key değeri(D), koşulları sağlaması açısından 41 olarak alınır.
		Bu örnekte elde etmiş olduğumuz değerleri eğer şifrelemede kullanırsak:
			-> RSA Algoritmasında Şifreleme 
			   Mesaj ^ E MOD N = Cipher Text(Şifrelenmiş Yazı)
			-> RSA Algoritmasında Deşifreleme
			   Şifrelenmiş Mesaj ^ D MOD N = Plain Text(Deşifrelenmiş Mesaj)
			-> Örneğimizde 29 olarak belirlenen Public key(E) değeriyle şifreleme ve 41 olarak belirlenen Private Key değeri kullanılarak deşifreleme gerçekleştirilecektir. Mesajın da 60 olduğu 
			düşünüldüğünde aşağıdaki gibi işlemler yapılabilir:
			(60 ^ 29) MOD 133 = 86 (Şifrelenmiş Mesaj / Cipher Text)
			(86 ^ 41) MOD 133 = 60 (Deşifrelenmiş Mesaj / Plain Text)
			Burada şüphesiz şifreleme için Private Key ve Deşifreleme için Public Key kullanımı söz konusu olabilirdi. Örneğin:
			Plain Text ^ D MOD N = Cipher Text
			Cipher Text ^ E MOD N = Plain Text 
			şeklinde söylenebilir. Buna göre bir şifreleme ve deşifreleme yapılması durumunda:
			(60 ^ 41) MOD 133 = 72 (Şifrelenmiş Mesaj / Cipher Text)
			(72 ^ 29) MOD 133 = 60 (Deşifrelenmiş Mesaj / Plain Text)
			Bu durum da gösteriyor ki asimetrik algoritmalarda 2 türlü şifrelem ve deşifreleme yapılması mümkündür. Sırasıyla önce Public Key sonrasında Private Key kullanılarak veya önce Private Key 
                        sonrasında Public Key kullanılarak yapılan Şifreleme-Deşifreleme olabilir. 
			-> RSA Algoritması ne kadar güvenli?
			Algoritmanın yaratıcılara 1991 yılında bir yarışma düzenleyerek 54 adet sayının asal çarpanlarını bulan kişilere para ödülü vericeklerini söylediler. Bu sayılar son derece büyük sayılar 
			olduğundan dolayı asal çarpanlarını bulmak hiç de kolay değildi. Yarışma 2007 yılında bitti ve sadece 12 adet sayının asal çarpanları yarışmacılar tarafından tespit edilebildi.  
			RSA algoritmasının güvenliği C++ kodu üzerinde tekrardan analiz edilecektir. 2020 yılında 11 tanesinin daha asal çarpanları bulundu ancak bunlar herhangi bir ödül almadı. 1991'den 2020 
                        senesine kadar iki asal sayının çarpımı şeklinde yazılabilen bulunabilmiş en büyük sayı 829 bitlik bir sayıdır. Bu da Şubat 2020 senesinde bulunmuştur. 29 yıl içerisinde 1024 bitlik sayı 
                        hiçbir zaman çarpanlarına ayırılamadı. Buradan yola çıkarak 2002 yılına kadar RSA algoritmaları için tavsiye edilen ürün değeri 1024 bit olarak belirlenmişti ancak 2015 yılında itibaren bu 
                        sayı 2048 bite kadar çıkarıldı. 2048 bitlik ürün değeri içeren bir ürün değerine sahip bir şifrelem yapılıyorsa bu verilerden yola çıkarak algoritmanın son derece güvenli olduğunu 
                        söyleyebiliriz. RSA algoritması güvenliliği ve pek çok asimetrik algoritmaya kıyasla hızlı çalışması sebebiyle 5G ve Wireless teknolojilerinde verilerin taşınmasında çokça tercih edilen 
                        bir veri şifreleme algoritmasıdır. 
			-> RSA algoritmasının avantajları
				-> Private Key kullanıldığından dolayı üçüncü kişilerin bu anahtarlara erişmesi mümkün olmadığından güvenilirdir.
				-> DSA algoritmasına göre daha hızlı çalışmaktadır.
				-> Data cannot be modified in transit(Veri taşınırken değiştirilemez.)
				-> Proof of omners authenticity(Kullanıcı doğrulama özelliğine sahiptir.)
			-> RSA algoritmasıyla ilgili daha önce yapılmış çalışmalar(Yazılmış makaleler veya Tezler)
				-> Durai Raj Vincent tarafından yazılmış olan RSA ENCRYPTION ALGORITHM - A SURVEY ON ITS VARIOUS FORMS AND ITS SECURITY LEVEL isimli makalede RSA algoritmasının güvenlik seviyesi 
				açısından incelenmiştir.
				-> M. Preetha1 ve M. Nithya tarafından yazılmış olan A STUDY AND PERFORMANCE ANALYSIS OF RSA ALGORITHM makalesi
				-> Xin Zhou ve Xiaofei Tang tarafından yazılmış olan Research and Implementation of RSA Algorithm for Encryption and Decryption isimli makale
				2011 yılında yazılmış olan bu makale RSA algoritmasında şifrelenin nasıl yapıldığını güzel bir şekilde açıklamaktadır. Ben de yüksek lisans tezim için bu kaynaktan faydalandım.
				-> Rajshahi Üniversitesinde Md. Ashraful Islam ve Touhidul Islam tarafından yazılan Secure Wireless Text Message Transmission with the Implementation of RSA Cryptographic Algorithm
				isimli makalede RSA algoritması kullanılarak yapılan yazı şifrelemelerden bahsedilmiştir.
				-> Bahal Bhiwani tarafından yazılan A Performance Analysis of DES and RSA Cryptography makalesi performans analizi açısından RSA ve DES algoritmalarını incelemektedir. 
	        - DSA(Digital Signature Algorithm)
			-> Bu bir asimetrik algoritmadır. Ancak RSA algoritmasının aksine bu algoritma anahtar değişikliği ve şifreleme yapamaz sadece imza oluşturup doğrulayabilir.
			-> DSA iki temel özelliğe sahiptir, bunlar:
				-> İmza oluşturma(Signature Generation): Bu özellikte girdi olarak mesajın yanı sıra bir private key, bir rastgele sayı ve DSA parametreleri alınır. Çıktı olarak elde edilecekler 
                                ise imza  şeklinde olacaktır. 	
				-> İmza Doğrulama(Signature Verification): Bu özellikte girdi olarak mesajla birlikte bir public key bir imza ve DSA parametreleri alınır. Çıktı olarak da 0 ve 1 diğer bir diyişle 
                               True veya False değerleri elde edilir. 
			-> Kısa bir özet geçmek gerekirse RSA algoritması şifreleme, imzalar ve anahtar değiştirme özelliklerinin tamamını barındırırken, DH algoritması yalnızca anahtar değişikliğini, DSA 
                        algoritması ise sadece imzaları barındırır.
		- Camellia
			-> NTT Grup ve Mitsubishi Elektrik Corporation tarafından 2000 yılında bulunan popüler simetrik algoritmalardan biridir.
			-> ISo/IEC, NESSIE projesi ve Japon CRYPTREC projeleri tarafından onaylanmıştır.
			-> 2006 yılından bu yana OpenSSL kütüphanesinde bulunmaktadır.
	- OpenSSL kütüphanesi C++ programlama dilinde nasıl kullanılıyor? 
		Burada bahsedilen algoritmaların OpenSSL kütüphanesinin C++ programlama dilinde kullanımıyla birlikte elde edilecek olan sonuçların analizi analizini temel alarak yapılacaktır. OpenSSL 
                kütüphanesinin algoritmayla birlikte aynı zamanda anahtar oluşturma yapısına da sahiptir. Bu anahtar isteğe bağlı olarak public key veya private key olabilir. 
5-) Algoritmaların Test Edilmesi
	Algoritmaların test edilmesi noktasında ise github linkinde bulunan C++ programı kullanılacaktır. Bu bölümde github linkinde yer alan kodun açıklaması, algoritmaları nasıl test ettiği ve algoritmaların 
	çözüm hızının nasıl hesaplandığı açıklacaktır.
	- Test amaçlı yazılan C++ kodunda hangi algoritmalar yer alıyor hangileri yer almıyor? Neden?
	Hep güvenilirlik olarak hem de efektif anlamda son derece önemli bir yere sahip olan AES algoritması şüphesiz ki bu test kodunda yer almaktadır. AES algoritmasının yanı sıra AES gibi simetrik ve aynı 
       zamanda efektif bir algoritma olan DES algoritması da test kodunda yer almaktadır ancak 5G ve Wireless teknolojilerinde veri güvenliği biraz daha ön planda olduğundan dolayı bu alanda AES algoritmasının 
       daha yaygın kullanıldığını da söylemek gerek. 
6-) Test Caselere bağlı olarak sonuçların değerlendirilmesi
	Bu bölümde şifrelenecek olan verilerdeki parametreler ile oynanarak elde edilecek olan sonuçlar analiz edilecektir.
	Burada bahsedilen test caselerin başında şifrelenecek verilerin tipleri gelmektedir. Şifrelenmesi düşünülen veri bir yazı bir dosya veya bir binary veri olabilir.
7-) Sonuç
Oluşturulan farklı test caselerle(Verilerin uzunluk değişimleri, şifrelenecek olan verilerin tipleri vb.) birlikte durumlar incelenerek bir sonuca ulaşılacaktır. Elde edilen sonuçlardan bir grafik oluşturulup 
seçilebilirlik açısından 5G ve Wireless tarafına ne kadar uyumlu olan algoritma veya algoritmalar seçilecektir.
8-) Kaynakça(Referanslar)  
Bu bölümde atıf yapılacak olan yüksek lisans veya doktora tezleri yer alıcaktır. Ayrıca konu hakkında yazılmış olan makaler de gene bu alanda yer alacaktır.

Anahtar Sözcükler: 5G, Wireless, Simetrik/Asimetrik Algoritmalar, Public/Private Key, AES,
Chacha20, RSA, DSA, Seed, Cast5, Dh, Camellia


